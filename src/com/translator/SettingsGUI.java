package com.translator;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Arrays;
import java.util.List;

//this class is build by netBeans
class SettingsGUI extends javax.swing.JPanel  {

    private static final List<Integer> MODIFIERS = Arrays.asList(
            KeyEvent.VK_ALT,
            KeyEvent.VK_CONTROL,
            KeyEvent.VK_SHIFT,
            KeyEvent.VK_META
    );

    private static final String INVALID_SHORTCUT = "Invalid shortcut";

    private Display display;
    private Settings settings;

    private Translator translator;


    SettingsGUI(Display display, Settings settings, Translator translator) {
        this.display = display;
        this.settings = settings;
        this.translator = translator;

        initComponents();
        initByHand();
    }

    private void initByHand() {
        fromComboBox.setSelectedItem(settings.getSrc());
        toComboBox.setSelectedItem(settings.getTo());

        startupBox.setSelected(settings.isOpenOnStartup());

        minimizeButton.setEnabled(SystemTray.isSupported());

        validateShortcut.setVisible(false);

        shortcutTextField.setEditable(false);
        shortcutTextField.setFocusTraversalKeysEnabled(false);

        shortcutTextField.setText(settings.getShortcut());

        shortcutTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {

                String keyToText = getKeyText(e);

                if (keyToText == null)
                    shortcutTextField.setText(INVALID_SHORTCUT);
                else
                    shortcutTextField.setText(keyToText);
            }
        });

        //direct the focus to the minimize button
        //so you cant accidentally change the shortcut
        display.addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                super.windowOpened(e);
                minimizeButton.requestFocus();
            }
        });

    }

    private String getKeyText(KeyEvent e) {

        //invalid shortcut
        if (MODIFIERS.contains(e.getKeyCode()))
            return null;

        return KeyStroke.getKeyStrokeForEvent(e).toString()
                .replaceAll("pressed ", "")
                .replaceAll(" ", "+");
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        appName = new javax.swing.JLabel();
        tip1 = new javax.swing.JLabel();
        tip2 = new javax.swing.JLabel();
        fromLabel = new javax.swing.JLabel();
        fromComboBox = new javax.swing.JComboBox<>();
        toLabel = new javax.swing.JLabel();
        toComboBox = new javax.swing.JComboBox<>();
        startupBox = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        minimizeButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        shortcutLabel = new javax.swing.JLabel();
        shortcutTextField = new javax.swing.JTextField();
        validateShortcut = new javax.swing.JLabel();

        appName.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        appName.setText("Translator");

        tip1.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        tip1.setText("Tip: to use the app just copy the content");

        tip2.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        tip2.setText("you want to translate and press the shortcut");

        fromLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        fromLabel.setText("translate from:");

        fromComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(settings.getLanguages()));

        toLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        toLabel.setText("translate to:");

        toComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(settings.getLanguages()));

        startupBox.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        startupBox.setSelected(true);
        startupBox.setText("Run on startup");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSaveClicked(evt);
            }
        });

        minimizeButton.setText("Minimize");
        minimizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onMinimizeClicked(evt);
            }
        });

        aboutButton.setText("About");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAboutClicked(evt);
            }
        });

        shortcutLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        shortcutLabel.setText("shortcut");

        shortcutTextField.setToolTipText("");

        validateShortcut.setForeground(new java.awt.Color(255, 0, 0));
        validateShortcut.setText("* shortcut not currect");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(aboutButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(minimizeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveButton)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(startupBox)
                                        .addComponent(tip2)
                                        .addComponent(tip1)
                                        .addComponent(appName)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(toLabel)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(toComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(fromLabel)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(fromComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(shortcutLabel)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(validateShortcut)
                                                        .addComponent(shortcutTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(appName)
                                .addGap(18, 18, 18)
                                .addComponent(tip1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tip2)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(shortcutLabel)
                                        .addComponent(shortcutTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(validateShortcut)
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(fromLabel)
                                        .addComponent(fromComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(toLabel)
                                        .addComponent(toComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(startupBox)
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(saveButton)
                                        .addComponent(minimizeButton)
                                        .addComponent(aboutButton))
                                .addContainerGap())
        );
    }// </editor-fold>

    private void onSaveClicked(java.awt.event.ActionEvent evt) {

        settings.setOpenOnStartup(startupBox.isSelected());

        settings.setSrc((String)fromComboBox.getSelectedItem());
        settings.setTo((String)toComboBox.getSelectedItem());

        String text = shortcutTextField.getText();

        if (!text.equals(INVALID_SHORTCUT)) {
            settings.setShortcut(text);
            translator.resetAndRegProvider();
        } else {
            shortcutTextField.setText(settings.getShortcut());
        }
        settings.saveSettings();
    }

    private void onMinimizeClicked(java.awt.event.ActionEvent evt) {
        display.setVisible(false);
    }

    private void onAboutClicked(java.awt.event.ActionEvent evt) {
        display.show(Display.ABOUT);
    }


    // Variables declaration - do not modify
    private javax.swing.JButton aboutButton;
    private javax.swing.JLabel appName;
    private javax.swing.JComboBox<String> fromComboBox;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JLabel validateShortcut;
    private javax.swing.JButton minimizeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel shortcutLabel;
    private javax.swing.JTextField shortcutTextField;
    private javax.swing.JCheckBox startupBox;
    private javax.swing.JLabel tip1;
    private javax.swing.JLabel tip2;
    private javax.swing.JComboBox<String> toComboBox;
    private javax.swing.JLabel toLabel;
    // End of variables declaration
}